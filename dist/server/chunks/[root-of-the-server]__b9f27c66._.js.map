{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/app/api/admin/create-user/route.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { NextResponse } from 'next/server'\n\n// Create admin client with service role key (server-side only!)\n// IMPORTANT: Never expose the service role key to the client\nconst supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n)\n\nexport async function POST(request: Request) {\n  try {\n    // Parse request body first\n    const body = await request.json()\n    const { email, password, full_name, role, mfa_enabled, is_active } = body\n\n    // Get authorization header\n    const authHeader = request.headers.get('authorization')\n\n    let isAdminRequest = false\n    let createdBy: string | null = null\n\n    // If authorization header exists, verify it's a super admin\n    if (authHeader) {\n      const token = authHeader.replace('Bearer ', '')\n\n      // Verify the requesting user's session\n      const { data: { user }, error: userError } = await supabaseAdmin.auth.getUser(token)\n      if (userError || !user) {\n        return NextResponse.json({ error: 'Invalid authorization token' }, { status: 401 })\n      }\n\n      // Check if requesting user is a super admin\n      const { data: billingUser, error: billingUserError } = await supabaseAdmin\n        .from('billing_users')\n        .select('role, is_active')\n        .eq('auth_user_id', user.id)\n        .single()\n\n      if (billingUserError || !billingUser) {\n        return NextResponse.json({ error: 'User not found' }, { status: 403 })\n      }\n\n      if (billingUser.role !== 'super_admin' || !billingUser.is_active) {\n        return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n      }\n\n      isAdminRequest = true\n      createdBy = user.id\n    }\n\n    // For public signup (no auth header), force is_active: false and role: admin\n    const finalIsActive = isAdminRequest ? (is_active !== false) : false\n    const finalRole = isAdminRequest ? role : 'admin'\n\n    // Validate input\n    if (!email || !password || !full_name) {\n      return NextResponse.json(\n        { error: 'Missing required fields: email, password, full_name' },\n        { status: 400 }\n      )\n    }\n\n    if (isAdminRequest && role && !['admin', 'super_admin'].includes(role)) {\n      return NextResponse.json(\n        { error: 'Invalid role. Must be \"admin\" or \"super_admin\"' },\n        { status: 400 }\n      )\n    }\n\n    if (password.length < 8) {\n      return NextResponse.json(\n        { error: 'Password must be at least 8 characters' },\n        { status: 400 }\n      )\n    }\n\n    // Create user in auth.users using admin API\n    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\n      email,\n      password,\n      email_confirm: true, // Auto-confirm users created by admins\n      user_metadata: {\n        full_name\n      }\n    })\n\n    if (authError) {\n      console.error('Auth creation error:', authError)\n      return NextResponse.json(\n        { error: `Failed to create auth user: ${authError.message}` },\n        { status: 500 }\n      )\n    }\n\n    if (!authData.user) {\n      return NextResponse.json(\n        { error: 'Auth user created but no user data returned' },\n        { status: 500 }\n      )\n    }\n\n    // Create billing_users record\n    const { data: newBillingUser, error: billingError } = await supabaseAdmin\n      .from('billing_users')\n      .insert({\n        auth_user_id: authData.user.id,\n        email,\n        full_name,\n        role: finalRole,\n        is_active: finalIsActive,\n        mfa_enabled: mfa_enabled || false,\n        created_by: createdBy,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single()\n\n    if (billingError) {\n      console.error('Billing user creation error:', billingError)\n\n      // Rollback: Delete the auth user we just created\n      try {\n        await supabaseAdmin.auth.admin.deleteUser(authData.user.id)\n      } catch (deleteError) {\n        console.error('Failed to rollback auth user:', deleteError)\n      }\n\n      return NextResponse.json(\n        { error: `Failed to create billing user: ${billingError.message}` },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({\n      success: true,\n      user: newBillingUser,\n      message: 'User created successfully'\n    })\n  } catch (error) {\n    console.error('Unexpected error in create-user API:', error)\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}