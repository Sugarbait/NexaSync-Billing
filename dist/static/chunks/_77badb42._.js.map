{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/Card.tsx"],"sourcesContent":["import React from 'react'\n\ninterface CardProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function Card({ children, className = '' }: CardProps) {\n  return (\n    <div className={`bg-gray-100 dark:bg-gray-800 rounded-lg shadow-sm border border-gray-300 dark:border-gray-700 ${className}`}>\n      {children}\n    </div>\n  )\n}\n\ninterface CardHeaderProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function CardHeader({ children, className = '' }: CardHeaderProps) {\n  return (\n    <div className={`px-6 py-4 border-b border-gray-200 dark:border-gray-700 ${className}`}>\n      {children}\n    </div>\n  )\n}\n\ninterface CardTitleProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function CardTitle({ children, className = '' }: CardTitleProps) {\n  return (\n    <h3 className={`text-lg font-bold gradient-text ${className}`}>\n      {children}\n    </h3>\n  )\n}\n\ninterface CardContentProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function CardContent({ children, className = '' }: CardContentProps) {\n  return (\n    <div className={`px-6 py-4 ${className}`}>\n      {children}\n    </div>\n  )\n}\n\ninterface CardFooterProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function CardFooter({ children, className = '' }: CardFooterProps) {\n  return (\n    <div className={`px-6 py-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 rounded-b-lg ${className}`}>\n      {children}\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAOO,SAAS,KAAK,KAAuC;QAAvC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAa,GAAvC;IACnB,qBACE,6LAAC;QAAI,WAAW,AAAC,iGAA0G,OAAV;kBAC9G;;;;;;AAGP;KANgB;AAaT,SAAS,WAAW,KAA6C;QAA7C,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAmB,GAA7C;IACzB,qBACE,6LAAC;QAAI,WAAW,AAAC,2DAAoE,OAAV;kBACxE;;;;;;AAGP;MANgB;AAaT,SAAS,UAAU,KAA4C;QAA5C,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAkB,GAA5C;IACxB,qBACE,6LAAC;QAAG,WAAW,AAAC,mCAA4C,OAAV;kBAC/C;;;;;;AAGP;MANgB;AAaT,SAAS,YAAY,KAA8C;QAA9C,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAoB,GAA9C;IAC1B,qBACE,6LAAC;QAAI,WAAW,AAAC,aAAsB,OAAV;kBAC1B;;;;;;AAGP;MANgB;AAaT,SAAS,WAAW,KAA6C;QAA7C,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAmB,GAA7C;IACzB,qBACE,6LAAC;QAAI,WAAW,AAAC,oGAA6G,OAAV;kBACjH;;;;;;AAGP;MANgB","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/Button.tsx"],"sourcesContent":["import React from 'react'\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'danger' | 'ghost'\n  size?: 'sm' | 'md' | 'lg'\n  loading?: boolean\n  children: React.ReactNode\n}\n\nexport function Button({\n  variant = 'primary',\n  size = 'md',\n  loading = false,\n  disabled,\n  children,\n  className = '',\n  ...props\n}: ButtonProps) {\n  const baseStyles = 'inline-flex items-center justify-center font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2'\n\n  const variants = {\n    primary: 'bg-blue-600 dark:bg-blue-500 text-white hover:bg-blue-700 dark:hover:bg-blue-600 focus:ring-blue-500 disabled:bg-blue-300 dark:disabled:bg-blue-800',\n    secondary: 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600 focus:ring-gray-500 disabled:bg-gray-100 dark:disabled:bg-gray-800',\n    danger: 'bg-red-600 dark:bg-red-500 text-white hover:bg-red-700 dark:hover:bg-red-600 focus:ring-red-500 disabled:bg-red-300 dark:disabled:bg-red-800',\n    ghost: 'bg-transparent text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:ring-gray-500'\n  }\n\n  const sizes = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg'\n  }\n\n  return (\n    <button\n      className={`${baseStyles} ${variants[variant]} ${sizes[size]} ${className} ${\n        (disabled || loading) ? 'cursor-not-allowed opacity-50' : ''\n      }`}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading && (\n        <svg\n          className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n        >\n          <circle\n            className=\"opacity-25\"\n            cx=\"12\"\n            cy=\"12\"\n            r=\"10\"\n            stroke=\"currentColor\"\n            strokeWidth=\"4\"\n          />\n          <path\n            className=\"opacity-75\"\n            fill=\"currentColor\"\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          />\n        </svg>\n      )}\n      {children}\n    </button>\n  )\n}\n"],"names":[],"mappings":";;;;;;AASO,SAAS,OAAO,KAQT;QARS,EACrB,UAAU,SAAS,EACnB,OAAO,IAAI,EACX,UAAU,KAAK,EACf,QAAQ,EACR,QAAQ,EACR,YAAY,EAAE,EACd,GAAG,OACS,GARS;IASrB,MAAM,aAAa;IAEnB,MAAM,WAAW;QACf,SAAS;QACT,WAAW;QACX,QAAQ;QACR,OAAO;IACT;IAEA,MAAM,QAAQ;QACZ,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;IAEA,qBACE,6LAAC;QACC,WAAW,AAAC,GAAgB,OAAd,YAAW,KAAwB,OAArB,QAAQ,CAAC,QAAQ,EAAC,KAAkB,OAAf,KAAK,CAAC,KAAK,EAAC,KAC3D,OAD8D,WAAU,KAEzE,OADC,AAAC,YAAY,UAAW,kCAAkC;QAE5D,UAAU,YAAY;QACrB,GAAG,KAAK;;YAER,yBACC,6LAAC;gBACC,WAAU;gBACV,OAAM;gBACN,MAAK;gBACL,SAAQ;;kCAER,6LAAC;wBACC,WAAU;wBACV,IAAG;wBACH,IAAG;wBACH,GAAE;wBACF,QAAO;wBACP,aAAY;;;;;;kCAEd,6LAAC;wBACC,WAAU;wBACV,MAAK;wBACL,GAAE;;;;;;;;;;;;YAIP;;;;;;;AAGP;KAzDgB","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/Input.tsx"],"sourcesContent":["import React from 'react'\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string\n  error?: string\n  helperText?: string\n  helpText?: string // Add support for helpText (alias for helperText)\n}\n\nexport function Input({\n  label,\n  error,\n  helperText,\n  helpText,\n  className = '',\n  ...props\n}: InputProps) {\n  // Use either helperText or helpText\n  const helper = helperText || helpText\n\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n          {label}\n        </label>\n      )}\n      <input\n        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 ${\n          error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n        } ${className}`}\n        {...props}\n      />\n      {error && (\n        <p className=\"mt-1 text-sm text-red-600\">{error}</p>\n      )}\n      {helper && !error && (\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">{helper}</p>\n      )}\n    </div>\n  )\n}\n\ninterface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label?: string\n  error?: string\n  helperText?: string\n}\n\nexport function Textarea({\n  label,\n  error,\n  helperText,\n  className = '',\n  ...props\n}: TextareaProps) {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n          {label}\n        </label>\n      )}\n      <textarea\n        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 ${\n          error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n        } ${className}`}\n        {...props}\n      />\n      {error && (\n        <p className=\"mt-1 text-sm text-red-600\">{error}</p>\n      )}\n      {helperText && !error && (\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">{helperText}</p>\n      )}\n    </div>\n  )\n}\n\ninterface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  label?: string\n  error?: string\n  helperText?: string\n  options: Array<{ value: string | number; label: string }>\n}\n\nexport function Select({\n  label,\n  error,\n  helperText,\n  options,\n  className = '',\n  ...props\n}: SelectProps) {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n          {label}\n        </label>\n      )}\n      <select\n        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 ${\n          error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n        } ${className}`}\n        {...props}\n      >\n        {options.map(option => (\n          <option key={option.value} value={option.value} className=\"bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100\">\n            {option.label}\n          </option>\n        ))}\n      </select>\n      {error && (\n        <p className=\"mt-1 text-sm text-red-600\">{error}</p>\n      )}\n      {helperText && !error && (\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">{helperText}</p>\n      )}\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;;;;;;AASO,SAAS,MAAM,KAOT;QAPS,EACpB,KAAK,EACL,KAAK,EACL,UAAU,EACV,QAAQ,EACR,YAAY,EAAE,EACd,GAAG,OACQ,GAPS;IAQpB,oCAAoC;IACpC,MAAM,SAAS,cAAc;IAE7B,qBACE,6LAAC;QAAI,WAAU;;YACZ,uBACC,6LAAC;gBAAM,WAAU;0BACd;;;;;;0BAGL,6LAAC;gBACC,WAAW,AAAC,uJAER,OADF,QAAQ,mBAAmB,wCAC5B,KAAa,OAAV;gBACH,GAAG,KAAK;;;;;;YAEV,uBACC,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;YAE3C,UAAU,CAAC,uBACV,6LAAC;gBAAE,WAAU;0BAAiD;;;;;;;;;;;;AAItE;KAhCgB;AAwCT,SAAS,SAAS,KAMT;QANS,EACvB,KAAK,EACL,KAAK,EACL,UAAU,EACV,YAAY,EAAE,EACd,GAAG,OACW,GANS;IAOvB,qBACE,6LAAC;QAAI,WAAU;;YACZ,uBACC,6LAAC;gBAAM,WAAU;0BACd;;;;;;0BAGL,6LAAC;gBACC,WAAW,AAAC,uJAER,OADF,QAAQ,mBAAmB,wCAC5B,KAAa,OAAV;gBACH,GAAG,KAAK;;;;;;YAEV,uBACC,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;YAE3C,cAAc,CAAC,uBACd,6LAAC;gBAAE,WAAU;0BAAiD;;;;;;;;;;;;AAItE;MA5BgB;AAqCT,SAAS,OAAO,KAOT;QAPS,EACrB,KAAK,EACL,KAAK,EACL,UAAU,EACV,OAAO,EACP,YAAY,EAAE,EACd,GAAG,OACS,GAPS;IAQrB,qBACE,6LAAC;QAAI,WAAU;;YACZ,uBACC,6LAAC;gBAAM,WAAU;0BACd;;;;;;0BAGL,6LAAC;gBACC,WAAW,AAAC,uJAER,OADF,QAAQ,mBAAmB,wCAC5B,KAAa,OAAV;gBACH,GAAG,KAAK;0BAER,QAAQ,GAAG,CAAC,CAAA,uBACX,6LAAC;wBAA0B,OAAO,OAAO,KAAK;wBAAE,WAAU;kCACvD,OAAO,KAAK;uBADF,OAAO,KAAK;;;;;;;;;;YAK5B,uBACC,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;YAE3C,cAAc,CAAC,uBACd,6LAAC;gBAAE,WAAU;0BAAiD;;;;;;;;;;;;AAItE;MAnCgB","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/Badge.tsx"],"sourcesContent":["import React from 'react'\n\ninterface BadgeProps {\n  children: React.ReactNode\n  color?: 'gray' | 'blue' | 'green' | 'red' | 'yellow'\n  className?: string\n}\n\nexport function Badge({ children, color = 'gray', className = '' }: BadgeProps) {\n  const colors = {\n    gray: 'bg-gray-100 text-gray-800',\n    blue: 'bg-blue-100 text-blue-800',\n    green: 'bg-green-100 text-green-800',\n    red: 'bg-red-100 text-red-800',\n    yellow: 'bg-yellow-100 text-yellow-800'\n  }\n\n  return (\n    <span\n      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colors[color]} ${className}`}\n    >\n      {children}\n    </span>\n  )\n}\n"],"names":[],"mappings":";;;;;;AAQO,SAAS,MAAM,KAAwD;QAAxD,EAAE,QAAQ,EAAE,QAAQ,MAAM,EAAE,YAAY,EAAE,EAAc,GAAxD;IACpB,MAAM,SAAS;QACb,MAAM;QACN,MAAM;QACN,OAAO;QACP,KAAK;QACL,QAAQ;IACV;IAEA,qBACE,6LAAC;QACC,WAAW,AAAC,2EAA2F,OAAjB,MAAM,CAAC,MAAM,EAAC,KAAa,OAAV;kBAEtG;;;;;;AAGP;KAhBgB","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/Modal.tsx"],"sourcesContent":["'use client'\n\nimport React, { useEffect } from 'react'\nimport { X } from 'lucide-react'\n\ninterface ModalProps {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  children: React.ReactNode\n  size?: 'sm' | 'md' | 'lg' | 'xl'\n}\n\nexport function Modal({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = 'md'\n}: ModalProps) {\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') onClose()\n    }\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'hidden'\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'unset'\n    }\n  }, [isOpen, onClose])\n\n  if (!isOpen) return null\n\n  const sizes = {\n    sm: 'max-w-md',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl'\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\n        onClick={onClose}\n      />\n\n      {/* Modal */}\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <div\n          className={`relative bg-gray-100 dark:bg-gray-800 rounded-lg shadow-xl ${sizes[size]} w-full`}\n          onClick={(e) => e.stopPropagation()}\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between px-6 py-4 border-b border-gray-300 dark:border-gray-700\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">{title}</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          </div>\n\n          {/* Content */}\n          <div className=\"px-6 py-4\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;AAHA;;;AAaO,SAAS,MAAM,KAMT;QANS,EACpB,MAAM,EACN,OAAO,EACP,KAAK,EACL,QAAQ,EACR,OAAO,IAAI,EACA,GANS;;IAOpB,IAAA,0KAAS;2BAAC;YACR,MAAM;gDAAe,CAAC;oBACpB,IAAI,EAAE,GAAG,KAAK,UAAU;gBAC1B;;YAEA,IAAI,QAAQ;gBACV,SAAS,gBAAgB,CAAC,WAAW;gBACrC,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG;YACjC;YAEA;mCAAO;oBACL,SAAS,mBAAmB,CAAC,WAAW;oBACxC,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG;gBACjC;;QACF;0BAAG;QAAC;QAAQ;KAAQ;IAEpB,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,QAAQ;QACZ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBACC,WAAU;gBACV,SAAS;;;;;;0BAIX,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBACC,WAAW,AAAC,8DAAyE,OAAZ,KAAK,CAAC,KAAK,EAAC;oBACrF,SAAS,CAAC,IAAM,EAAE,eAAe;;sCAGjC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAA0D;;;;;;8CACxE,6LAAC;oCACC,SAAS;oCACT,WAAU;8CAEV,cAAA,6LAAC,oMAAC;wCAAC,WAAU;;;;;;;;;;;;;;;;;sCAKjB,6LAAC;4BAAI,WAAU;sCACZ;;;;;;;;;;;;;;;;;;;;;;;AAMb;GAjEgB;KAAA","debugId":null}},
    {"offset": {"line": 498, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/lib/services/mfaService.ts"],"sourcesContent":["/**\n * ⚠️ SECURITY CRITICAL FILE - DO NOT MODIFY WITHOUT AUTHORIZATION ⚠️\n *\n * MFA Service - TOTP (Time-based One-Time Password) Implementation\n * Uses Google Authenticator compatible TOTP tokens\n *\n * This file contains cryptographic operations for MFA.\n * Any unauthorized changes could compromise system security.\n *\n * Contact: elitesquadp@protonmail.com for authorization\n */\n\nimport { authenticator } from 'otplib'\nimport QRCode from 'qrcode'\n\nclass MFAService {\n  /**\n   * Generate a new MFA secret for a user\n   */\n  generateSecret(): string {\n    return authenticator.generateSecret()\n  }\n\n  /**\n   * Generate QR code URL for scanning with authenticator app\n   */\n  async generateQRCode(email: string, secret: string): Promise<string> {\n    const otpauth = authenticator.keyuri(email, 'NexaSync Billing', secret)\n\n    try {\n      const qrCodeDataUrl = await QRCode.toDataURL(otpauth)\n      return qrCodeDataUrl\n    } catch (error) {\n      console.error('Failed to generate QR code:', error)\n      throw new Error('Failed to generate QR code')\n    }\n  }\n\n  /**\n   * Generate backup codes for MFA recovery\n   */\n  generateBackupCodes(count: number = 8): string[] {\n    const codes: string[] = []\n    for (let i = 0; i < count; i++) {\n      // Generate 8-character alphanumeric codes\n      const code = Math.random().toString(36).substring(2, 10).toUpperCase()\n      codes.push(code)\n    }\n    return codes\n  }\n\n  /**\n   * Verify a TOTP token\n   */\n  verifyToken(token: string, secret: string): boolean {\n    try {\n      // Remove any spaces or dashes from the token\n      const cleanToken = token.replace(/[\\s-]/g, '')\n\n      // Verify the token with a window of ±1 time step (30 seconds)\n      return authenticator.verify({\n        token: cleanToken,\n        secret: secret\n      })\n    } catch (error) {\n      console.error('Token verification failed:', error)\n      return false\n    }\n  }\n\n  /**\n   * Get the current TOTP token (for testing purposes)\n   */\n  generateToken(secret: string): string {\n    return authenticator.generate(secret)\n  }\n\n  /**\n   * Encrypt MFA secret before storing in database\n   * NOTE: This is a simple base64 encoding. In production, use proper encryption (AES-256-GCM)\n   */\n  encryptSecret(secret: string): string {\n    // TODO: Replace with actual encryption in production\n    return Buffer.from(secret).toString('base64')\n  }\n\n  /**\n   * Decrypt MFA secret from database\n   */\n  decryptSecret(encryptedSecret: string): string {\n    // TODO: Replace with actual decryption in production\n    return Buffer.from(encryptedSecret, 'base64').toString('utf-8')\n  }\n\n  /**\n   * Format secret for display (shows as XXXX XXXX XXXX XXXX)\n   */\n  formatSecretForDisplay(secret: string): string {\n    return secret.match(/.{1,4}/g)?.join(' ') || secret\n  }\n}\n\nexport const mfaService = new MFAService()\n"],"names":[],"mappings":"AAAA;;;;;;;;;;CAUC;;;;AAyEU;AAvEX;AACA;;;AAEA,MAAM;IACJ;;GAEC,GACD,iBAAyB;QACvB,OAAO,mJAAa,CAAC,cAAc;IACrC;IAEA;;GAEC,GACD,MAAM,eAAe,KAAa,EAAE,MAAc,EAAmB;QACnE,MAAM,UAAU,mJAAa,CAAC,MAAM,CAAC,OAAO,oBAAoB;QAEhE,IAAI;YACF,MAAM,gBAAgB,MAAM,sJAAM,CAAC,SAAS,CAAC;YAC7C,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,MAAM,IAAI,MAAM;QAClB;IACF;IAEA;;GAEC,GACD,sBAAiD;YAA7B,QAAA,iEAAgB;QAClC,MAAM,QAAkB,EAAE;QAC1B,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;YAC9B,0CAA0C;YAC1C,MAAM,OAAO,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI,WAAW;YACpE,MAAM,IAAI,CAAC;QACb;QACA,OAAO;IACT;IAEA;;GAEC,GACD,YAAY,KAAa,EAAE,MAAc,EAAW;QAClD,IAAI;YACF,6CAA6C;YAC7C,MAAM,aAAa,MAAM,OAAO,CAAC,UAAU;YAE3C,8DAA8D;YAC9D,OAAO,mJAAa,CAAC,MAAM,CAAC;gBAC1B,OAAO;gBACP,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO;QACT;IACF;IAEA;;GAEC,GACD,cAAc,MAAc,EAAU;QACpC,OAAO,mJAAa,CAAC,QAAQ,CAAC;IAChC;IAEA;;;GAGC,GACD,cAAc,MAAc,EAAU;QACpC,qDAAqD;QACrD,OAAO,wKAAM,CAAC,IAAI,CAAC,QAAQ,QAAQ,CAAC;IACtC;IAEA;;GAEC,GACD,cAAc,eAAuB,EAAU;QAC7C,qDAAqD;QACrD,OAAO,wKAAM,CAAC,IAAI,CAAC,iBAAiB,UAAU,QAAQ,CAAC;IACzD;IAEA;;GAEC,GACD,uBAAuB,MAAc,EAAU;YACtC;QAAP,OAAO,EAAA,gBAAA,OAAO,KAAK,CAAC,wBAAb,oCAAA,cAAyB,IAAI,CAAC,SAAQ;IAC/C;AACF;AAEO,MAAM,aAAa,IAAI","debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/app/admin/billing/users/actions.ts"],"sourcesContent":["// Note: Password updates disabled for static hosting\n// This functionality requires a backend server\n\nexport async function updateUserPassword(authUserId: string, newPassword: string) {\n  // Disabled for static export\n  console.warn('Password update is not available in static hosting mode')\n  return { success: false, error: 'Password updates require a backend server. Please use Supabase dashboard to update passwords.' }\n}\n"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,+CAA+C;;;;;AAExC,eAAe,mBAAmB,UAAkB,EAAE,WAAmB;IAC9E,6BAA6B;IAC7B,QAAQ,IAAI,CAAC;IACb,OAAO;QAAE,SAAS;QAAO,OAAO;IAAgG;AAClI","debugId":null}},
    {"offset": {"line": 617, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/app/admin/billing/users/page.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { UserPlus, Shield, Trash2, Edit, Key, Mail, Copy, QrCode, XCircle, CheckCircle2 } from 'lucide-react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'\nimport { Button } from '@/components/ui/Button'\nimport { Input } from '@/components/ui/Input'\nimport { Badge } from '@/components/ui/Badge'\nimport { Modal } from '@/components/ui/Modal'\nimport { supabase } from '@/lib/supabase'\nimport { mfaService } from '@/lib/services/mfaService'\nimport type { BillingUser } from '@/lib/types/auth'\nimport { useNotification } from '@/components/ui/Notification'\nimport { updateUserPassword } from './actions'\n\nexport default function UsersPage() {\n  const { showNotification, showConfirm } = useNotification()\n  const [loading, setLoading] = useState(true)\n  const [users, setUsers] = useState<BillingUser[]>([])\n  const [filterStatus, setFilterStatus] = useState<'all' | 'active' | 'pending'>('all')\n  const [showModal, setShowModal] = useState(false)\n  const [showDetailModal, setShowDetailModal] = useState(false)\n  const [showInviteModal, setShowInviteModal] = useState(false)\n  const [showMfaSetupModal, setShowMfaSetupModal] = useState(false)\n  const [mfaSetupStep, setMfaSetupStep] = useState<'qrcode' | 'verify' | 'backup'>('qrcode')\n  const [mfaSetupUser, setMfaSetupUser] = useState<BillingUser | null>(null)\n  const [mfaData, setMfaData] = useState({ secret: '', qrCode: '', backupCodes: [] as string[] })\n  const [verificationCode, setVerificationCode] = useState('')\n  const [verificationError, setVerificationError] = useState('')\n  const [inviteUrl, setInviteUrl] = useState('')\n  const [selectedUser, setSelectedUser] = useState<BillingUser | null>(null)\n  const [editingUser, setEditingUser] = useState<BillingUser | null>(null)\n  const [formData, setFormData] = useState({\n    email: '',\n    full_name: '',\n    password: '',\n    confirmPassword: '',\n    role: 'admin' as 'super_admin' | 'admin',\n    mfa_enabled: false\n  })\n  const [passwordsMatch, setPasswordsMatch] = useState(true)\n  const [inviteData, setInviteData] = useState({\n    email: '',\n    role: 'admin' as 'super_admin' | 'admin'\n  })\n  const [showPasswordModal, setShowPasswordModal] = useState(false)\n  const [passwordChangeUser, setPasswordChangeUser] = useState<BillingUser | null>(null)\n  const [passwordChangeData, setPasswordChangeData] = useState({\n    newPassword: '',\n    confirmNewPassword: ''\n  })\n\n  useEffect(() => {\n    loadUsers()\n  }, [])\n\n  async function loadUsers() {\n    setLoading(true)\n    try {\n      // Check if user is authenticated\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) {\n        console.error('Not authenticated')\n        setUsers([])\n        return\n      }\n\n      const { data, error } = await supabase\n        .from('billing_users')\n        .select('*')\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        console.error('Supabase error details:', {\n          message: error.message,\n          details: error.details,\n          hint: error.hint,\n          code: error.code\n        })\n        throw error\n      }\n      setUsers(data || [])\n    } catch (error) {\n      console.error('Failed to load users:', error)\n      setUsers([])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault()\n\n    // Validate passwords match\n    if (formData.password && formData.password !== formData.confirmPassword) {\n      showNotification('Passwords do not match', 'error')\n      return\n    }\n\n    // Validate password length if provided\n    if (formData.password && formData.password.length < 8) {\n      showNotification('Password must be at least 8 characters', 'error')\n      return\n    }\n\n    try {\n      if (editingUser) {\n        // Update existing user in billing_users\n        const { error } = await supabase\n          .from('billing_users')\n          .update({\n            full_name: formData.full_name,\n            role: formData.role,\n            mfa_enabled: formData.mfa_enabled,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', editingUser.id)\n\n        if (error) throw error\n\n        // Update password if provided\n        if (formData.password) {\n          if (!editingUser.auth_user_id) {\n            throw new Error('User has no associated auth account')\n          }\n          const result = await updateUserPassword(editingUser.auth_user_id, formData.password)\n\n          if (!result.success) {\n            throw new Error(result.error || 'Failed to update password')\n          }\n          showNotification('User and password updated successfully', 'success')\n        } else {\n          showNotification('User updated successfully', 'success')\n        }\n      } else {\n        // Create new user via server-side API route\n        const { data: sessionData } = await supabase.auth.getSession()\n\n        if (!sessionData.session) {\n          throw new Error('You must be logged in to create users')\n        }\n\n        const response = await fetch('/api/admin/create-user', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${sessionData.session.access_token}`\n          },\n          body: JSON.stringify({\n            email: formData.email,\n            password: formData.password,\n            full_name: formData.full_name,\n            role: formData.role,\n            mfa_enabled: formData.mfa_enabled\n          })\n        })\n\n        const result = await response.json()\n\n        if (!response.ok) {\n          console.error('API error:', result)\n          throw new Error(result.error || 'Failed to create user')\n        }\n\n        // If MFA is enabled, show MFA setup modal\n        if (formData.mfa_enabled && result.user) {\n          closeModal()\n          await setupMfaForUser(result.user)\n          return\n        }\n\n        showNotification('User created successfully!', 'success')\n      }\n\n      closeModal()\n      loadUsers()\n    } catch (error) {\n      console.error('Failed to save user:', error)\n      showNotification('Failed to save user: ' + (error instanceof Error ? error.message : 'Unknown error'), 'error')\n    }\n  }\n\n  async function handleDelete(user: BillingUser) {\n    showConfirm(`Are you sure you want to permanently delete ${user.full_name}? This action cannot be undone.`, async () => {\n      try {\n        // First, delete from Supabase Auth if auth_user_id exists\n        if (user.auth_user_id) {\n          try {\n            // Try to delete from auth.users using the admin API\n            // Note: This requires service role key, so we'll handle gracefully if it fails\n            const { data: { user: authUser } } = await supabase.auth.getUser()\n\n            // We can't delete auth users with anon key, so we'll just delete from billing_users\n            console.log('Note: Auth user cannot be deleted with current permissions. Only removing from billing_users.')\n          } catch (authError) {\n            console.log('Auth deletion skipped:', authError)\n          }\n        }\n\n        // Delete from billing_users table\n        const { error } = await supabase\n          .from('billing_users')\n          .delete()\n          .eq('id', user.id)\n\n        if (error) throw error\n\n        showNotification('User deleted successfully', 'success')\n        loadUsers()\n      } catch (error) {\n        console.error('Failed to delete user:', error)\n        showNotification('Failed to delete user: ' + (error instanceof Error ? error.message : 'Unknown error'), 'error')\n      }\n    })\n  }\n\n  async function handleApproveUser(user: BillingUser) {\n    showConfirm(`Approve ${user.full_name} and allow them to log in?`, async () => {\n      try {\n        const { error } = await supabase\n          .from('billing_users')\n          .update({ is_active: true, updated_at: new Date().toISOString() })\n          .eq('id', user.id)\n\n        if (error) throw error\n        showNotification(`${user.full_name} has been approved`, 'success')\n        loadUsers()\n      } catch (error) {\n        console.error('Failed to approve user:', error)\n        showNotification('Failed to approve user', 'error')\n      }\n    })\n  }\n\n  async function handleToggleActive(user: BillingUser) {\n    try {\n      const { error } = await supabase\n        .from('billing_users')\n        .update({ is_active: !user.is_active })\n        .eq('id', user.id)\n\n      if (error) throw error\n      loadUsers()\n    } catch (error) {\n      console.error('Failed to toggle user status:', error)\n    }\n  }\n\n  async function handleToggleMFA(user: BillingUser) {\n    if (user.mfa_enabled) {\n      // Disabling MFA\n      showConfirm(`Are you sure you want to disable MFA for ${user.full_name}?`, async () => {\n        try {\n          const { error } = await supabase\n            .from('billing_users')\n            .update({\n              mfa_enabled: false,\n              mfa_secret: null,\n              updated_at: new Date().toISOString()\n            })\n            .eq('id', user.id)\n\n          if (error) throw error\n          showNotification('MFA disabled successfully', 'success')\n\n          // Update selectedUser if detail modal is open\n          if (selectedUser?.id === user.id) {\n            setSelectedUser({ ...user, mfa_enabled: false })\n          }\n\n          loadUsers()\n        } catch (error) {\n          console.error('Failed to disable MFA:', error)\n          showNotification('Failed to disable MFA', 'error')\n        }\n      })\n    } else {\n      // Enabling MFA - trigger setup flow\n      setShowDetailModal(false) // Close detail modal first\n      await setupMfaForUser(user)\n    }\n  }\n\n  function openPasswordChangeModal(user: BillingUser) {\n    setPasswordChangeUser(user)\n    setPasswordChangeData({\n      newPassword: '',\n      confirmNewPassword: ''\n    })\n    setShowPasswordModal(true)\n  }\n\n  async function handlePasswordChange(e: React.FormEvent) {\n    e.preventDefault()\n\n    if (!passwordChangeUser) return\n\n    if (passwordChangeData.newPassword !== passwordChangeData.confirmNewPassword) {\n      showNotification('Passwords do not match', 'error')\n      return\n    }\n\n    if (passwordChangeData.newPassword.length < 8) {\n      showNotification('Password must be at least 8 characters', 'error')\n      return\n    }\n\n    try {\n      // Use server action to update user password\n      if (!passwordChangeUser.auth_user_id) {\n        throw new Error('User has no associated auth account')\n      }\n\n      const result = await updateUserPassword(\n        passwordChangeUser.auth_user_id,\n        passwordChangeData.newPassword\n      )\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to update password')\n      }\n\n      showNotification(`Password updated successfully for ${passwordChangeUser.full_name}`, 'success')\n      setShowPasswordModal(false)\n      setPasswordChangeUser(null)\n      setPasswordChangeData({ newPassword: '', confirmNewPassword: '' })\n    } catch (error) {\n      console.error('Failed to change password:', error)\n      showNotification(error instanceof Error ? error.message : 'Failed to change password', 'error')\n    }\n  }\n\n  function openAddModal() {\n    setEditingUser(null)\n    setFormData({\n      email: '',\n      full_name: '',\n      password: '',\n      confirmPassword: '',\n      role: 'admin',\n      mfa_enabled: false\n    })\n    setPasswordsMatch(true)\n    setShowModal(true)\n  }\n\n  function openEditModal(user: BillingUser) {\n    setEditingUser(user)\n    setFormData({\n      email: user.email,\n      full_name: user.full_name,\n      password: '',\n      confirmPassword: '',\n      role: user.role,\n      mfa_enabled: user.mfa_enabled\n    })\n    setShowModal(true)\n  }\n\n  function viewDetails(user: BillingUser) {\n    setSelectedUser(user)\n    setShowDetailModal(true)\n  }\n\n  function closeModal() {\n    setShowModal(false)\n    setEditingUser(null)\n  }\n\n  function openInviteModal() {\n    setInviteData({ email: '', role: 'admin' })\n    setInviteUrl('')\n    setShowInviteModal(true)\n  }\n\n  function closeInviteModal() {\n    setShowInviteModal(false)\n    setInviteData({ email: '', role: 'admin' })\n    setInviteUrl('')\n  }\n\n  async function setupMfaForUser(user: BillingUser) {\n    try {\n      // Generate MFA secret and QR code\n      const secret = mfaService.generateSecret()\n      const qrCode = await mfaService.generateQRCode(user.email, secret)\n      const backupCodes = mfaService.generateBackupCodes()\n\n      setMfaData({ secret, qrCode, backupCodes })\n      setMfaSetupUser(user)\n      setShowMfaSetupModal(true)\n    } catch (error) {\n      console.error('Failed to generate MFA setup:', error)\n      showNotification('Failed to generate MFA setup', 'error')\n    }\n  }\n\n  async function saveMfaSetup() {\n    if (!mfaSetupUser) return\n\n    try {\n      // Encrypt and save the secret\n      const encryptedSecret = mfaService.encryptSecret(mfaData.secret)\n\n      const { error } = await supabase\n        .from('billing_users')\n        .update({\n          mfa_enabled: true,\n          mfa_secret: encryptedSecret,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', mfaSetupUser.id)\n\n      if (error) throw error\n\n      showNotification('MFA setup completed successfully! User can now use their authenticator app to log in.', 'success')\n      setShowMfaSetupModal(false)\n      setMfaSetupUser(null)\n      loadUsers()\n    } catch (error) {\n      console.error('Failed to save MFA setup:', error)\n      showNotification('Failed to save MFA setup', 'error')\n    }\n  }\n\n  function closeMfaSetupModal() {\n    setShowMfaSetupModal(false)\n    setMfaSetupStep('qrcode')\n    setMfaSetupUser(null)\n    setMfaData({ secret: '', qrCode: '', backupCodes: [] })\n    setVerificationCode('')\n    setVerificationError('')\n  }\n\n  function handleVerifyCode() {\n    setVerificationError('')\n\n    if (verificationCode.length !== 6) {\n      setVerificationError('Please enter a 6-digit code')\n      return\n    }\n\n    // Verify the token using mfaService\n    const isValid = mfaService.verifyToken(verificationCode, mfaData.secret)\n\n    if (!isValid) {\n      setVerificationError('Invalid verification code. Please try again.')\n      return\n    }\n\n    // Code is valid, proceed to backup codes\n    setVerificationCode('')\n    setMfaSetupStep('backup')\n  }\n\n  async function copyToClipboard(text: string) {\n    try {\n      await navigator.clipboard.writeText(text)\n      showNotification('Copied to clipboard!', 'success')\n    } catch (error) {\n      showNotification('Failed to copy', 'error')\n    }\n  }\n\n  async function handleSendInvite(e: React.FormEvent) {\n    e.preventDefault()\n\n    try {\n      const { data: userData } = await supabase.auth.getUser()\n      if (!userData.user) throw new Error('Not authenticated')\n\n      const response = await fetch('/api/invite-user', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: inviteData.email,\n          role: inviteData.role,\n          invitedBy: userData.user.id\n        })\n      })\n\n      const result = await response.json()\n\n      if (!result.success) throw new Error(result.error)\n\n      setInviteUrl(result.inviteUrl)\n      showNotification('Invite created successfully! Share the link below.', 'success')\n    } catch (error) {\n      console.error('Failed to send invite:', error)\n      showNotification('Failed to send invite: ' + (error instanceof Error ? error.message : 'Unknown error'), 'error')\n    }\n  }\n\n  async function copyInviteUrl() {\n    try {\n      await navigator.clipboard.writeText(inviteUrl)\n      showNotification('Invite link copied to clipboard!', 'success')\n    } catch (error) {\n      showNotification('Failed to copy link', 'error')\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-8\"></div>\n          <div className=\"h-64 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n        </div>\n      </div>\n    )\n  }\n\n  // Filter users based on status\n  const filteredUsers = users.filter(user => {\n    if (filterStatus === 'active') return user.is_active\n    if (filterStatus === 'pending') return !user.is_active\n    return true // 'all'\n  })\n\n  const pendingCount = users.filter(u => !u.is_active).length\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-black gradient-text\">User Management</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Manage system users and permissions</p>\n        </div>\n        <div className=\"flex gap-3\">\n          <Button onClick={openInviteModal} variant=\"secondary\">\n            <Mail className=\"w-4 h-4 mr-2\" />\n            Invite User\n          </Button>\n          <Button onClick={openAddModal}>\n            <UserPlus className=\"w-4 h-4 mr-2\" />\n            Add User\n          </Button>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Users ({filteredUsers.length})</CardTitle>\n            <div className=\"flex gap-2\">\n              <Button\n                variant={filterStatus === 'all' ? 'primary' : 'secondary'}\n                onClick={() => setFilterStatus('all')}\n                size=\"sm\"\n              >\n                All ({users.length})\n              </Button>\n              <Button\n                variant={filterStatus === 'active' ? 'primary' : 'secondary'}\n                onClick={() => setFilterStatus('active')}\n                size=\"sm\"\n              >\n                Active ({users.filter(u => u.is_active).length})\n              </Button>\n              <Button\n                variant={filterStatus === 'pending' ? 'primary' : 'secondary'}\n                onClick={() => setFilterStatus('pending')}\n                size=\"sm\"\n              >\n                Pending ({pendingCount})\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                  <th className=\"text-left py-3 px-4 text-sm font-semibold text-gray-700 dark:text-gray-300\">Name</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-semibold text-gray-700 dark:text-gray-300\">Email</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-semibold text-gray-700 dark:text-gray-300\">Role</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-semibold text-gray-700 dark:text-gray-300\">MFA</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-semibold text-gray-700 dark:text-gray-300\">Status</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-semibold text-gray-700 dark:text-gray-300\">Last Login</th>\n                  <th className=\"text-right py-3 px-4 text-sm font-semibold text-gray-700 dark:text-gray-300\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredUsers.map((user) => (\n                  <tr\n                    key={user.id}\n                    className=\"border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer\"\n                    onClick={() => viewDetails(user)}\n                  >\n                    <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-gray-100\">{user.full_name}</td>\n                    <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{user.email}</td>\n                    <td className=\"py-3 px-4\">\n                      {user.role === 'super_admin' ? (\n                        <Badge color=\"blue\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Super Admin\n                        </Badge>\n                      ) : (\n                        <Badge color=\"gray\">Admin</Badge>\n                      )}\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      {user.mfa_enabled ? (\n                        <Badge color=\"green\">\n                          <Key className=\"w-3 h-3 mr-1\" />\n                          Enabled\n                        </Badge>\n                      ) : (\n                        <Badge color=\"yellow\">Disabled</Badge>\n                      )}\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      {user.is_active ? (\n                        <Badge color=\"green\">Active</Badge>\n                      ) : (\n                        <Badge color=\"red\">Inactive</Badge>\n                      )}\n                    </td>\n                    <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                      {user.last_login_at ? new Date(user.last_login_at).toLocaleDateString() : 'Never'}\n                    </td>\n                    <td className=\"py-3 px-4\" onClick={(e) => e.stopPropagation()}>\n                      <div className=\"flex justify-end gap-2\">\n                        {!user.is_active && (\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              handleApproveUser(user)\n                            }}\n                            className=\"p-2 text-green-600 dark:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/30 rounded\"\n                            title=\"Approve user\"\n                          >\n                            <CheckCircle2 className=\"w-4 h-4\" />\n                          </button>\n                        )}\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation()\n                            openEditModal(user)\n                          }}\n                          className=\"p-2 text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/30 rounded\"\n                          title=\"Edit user\"\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation()\n                            handleToggleActive(user)\n                          }}\n                          className=\"p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded\"\n                          title={user.is_active ? 'Deactivate' : 'Activate'}\n                        >\n                          <Shield className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation()\n                            handleDelete(user)\n                          }}\n                          className=\"p-2 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/30 rounded\"\n                          title=\"Delete user\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* User Detail Modal */}\n      {selectedUser && (\n        <Modal\n          isOpen={showDetailModal}\n          onClose={() => setShowDetailModal(false)}\n          title=\"User Details\"\n          size=\"lg\"\n        >\n          <div className=\"space-y-6\">\n            {/* User Information */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-3 text-gray-900 dark:text-gray-100\">User Information</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Full Name</p>\n                  <p className=\"font-medium text-gray-900 dark:text-gray-100\">{selectedUser.full_name}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Email</p>\n                  <p className=\"font-medium text-gray-900 dark:text-gray-100\">{selectedUser.email}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Role</p>\n                  <div className=\"mt-1\">\n                    {selectedUser.role === 'super_admin' ? (\n                      <Badge color=\"blue\">\n                        <Shield className=\"w-3 h-3 mr-1\" />\n                        Super Admin\n                      </Badge>\n                    ) : (\n                      <Badge color=\"gray\">Admin</Badge>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Status</p>\n                  <div className=\"mt-1\">\n                    {selectedUser.is_active ? (\n                      <Badge color=\"green\">Active</Badge>\n                    ) : (\n                      <Badge color=\"red\">Inactive</Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Security Settings */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-3 text-gray-900 dark:text-gray-100\">Security</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Multi-Factor Authentication</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                      {selectedUser.mfa_enabled\n                        ? 'MFA is currently enabled for this user'\n                        : 'MFA is currently disabled for this user'}\n                    </p>\n                  </div>\n                  <Button\n                    variant={selectedUser.mfa_enabled ? 'secondary' : 'primary'}\n                    onClick={() => handleToggleMFA(selectedUser)}\n                  >\n                    <Key className=\"w-4 h-4 mr-2\" />\n                    {selectedUser.mfa_enabled ? 'Disable MFA' : 'Enable MFA'}\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Password</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                      Change the user's password\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={() => openPasswordChangeModal(selectedUser)}\n                  >\n                    <Key className=\"w-4 h-4 mr-2\" />\n                    Change Password\n                  </Button>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">MFA Status</p>\n                    <div className=\"mt-1\">\n                      {selectedUser.mfa_enabled ? (\n                        <Badge color=\"green\">\n                          <Key className=\"w-3 h-3 mr-1\" />\n                          Enabled\n                        </Badge>\n                      ) : (\n                        <Badge color=\"yellow\">Disabled</Badge>\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Last Login</p>\n                    <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                      {selectedUser.last_login_at ? new Date(selectedUser.last_login_at).toLocaleString() : 'Never'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Account Details */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-3 text-gray-900 dark:text-gray-100\">Account Details</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Created</p>\n                  <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                    {new Date(selectedUser.created_at).toLocaleString()}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">User ID</p>\n                  <p className=\"font-mono text-xs text-gray-900 dark:text-gray-100\">{selectedUser.id}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex justify-end gap-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n              <Button\n                variant=\"secondary\"\n                onClick={() => setShowDetailModal(false)}\n              >\n                Close\n              </Button>\n              <Button\n                onClick={() => {\n                  setShowDetailModal(false)\n                  openEditModal(selectedUser)\n                }}\n              >\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Edit User\n              </Button>\n            </div>\n          </div>\n        </Modal>\n      )}\n\n      {/* Add/Edit User Modal */}\n      <Modal\n        isOpen={showModal}\n        onClose={closeModal}\n        title={editingUser ? 'Edit User' : 'Add New User'}\n      >\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <Input\n            label=\"Full Name\"\n            value={formData.full_name}\n            onChange={(e) => setFormData({ ...formData, full_name: e.target.value })}\n            required\n          />\n\n          <Input\n            label=\"Email\"\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n            disabled={!!editingUser}\n            required\n          />\n\n          {editingUser && (\n            <div className=\"bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 p-3 rounded-lg\">\n              <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                <strong>Change Password:</strong> Leave password fields blank to keep the current password. Enter a new password to update it.\n              </p>\n            </div>\n          )}\n\n          <Input\n            label=\"Password\"\n            type=\"password\"\n            value={formData.password}\n            onChange={(e) => {\n              const newPassword = e.target.value\n              setFormData({ ...formData, password: newPassword })\n              // Check if passwords match in real-time\n              setPasswordsMatch(newPassword === formData.confirmPassword || formData.confirmPassword === '')\n            }}\n            helpText={editingUser ? \"Leave blank to keep current password (minimum 8 characters if changing)\" : \"Minimum 8 characters\"}\n            required={!editingUser}\n          />\n\n          <div className=\"relative\">\n            <Input\n              label=\"Confirm Password\"\n              type=\"password\"\n              value={formData.confirmPassword}\n              onChange={(e) => {\n                const newConfirm = e.target.value\n                setFormData({ ...formData, confirmPassword: newConfirm })\n                // Check if passwords match in real-time\n                setPasswordsMatch(formData.password === newConfirm || newConfirm === '')\n              }}\n              required={!editingUser}\n            />\n            {formData.confirmPassword && (\n              <div className=\"absolute right-3 top-9 pointer-events-none\">\n                {passwordsMatch ? (\n                  <div className=\"flex items-center gap-1 text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/30 px-2 py-1 rounded\">\n                    <CheckCircle2 className=\"w-4 h-4\" />\n                    <span className=\"text-xs font-medium\">Match</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-1 text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/30 px-2 py-1 rounded\">\n                    <XCircle className=\"w-4 h-4\" />\n                    <span className=\"text-xs font-medium\">Don't match</span>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-800 dark:text-gray-200 mb-2\">Role</label>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  checked={formData.role === 'admin'}\n                  onChange={() => setFormData({ ...formData, role: 'admin' })}\n                  className=\"mr-2\"\n                />\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Admin (Can manage billing data)</span>\n              </label>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  checked={formData.role === 'super_admin'}\n                  onChange={() => setFormData({ ...formData, role: 'super_admin' })}\n                  className=\"mr-2\"\n                />\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Super Admin (Full access + user management)</span>\n              </label>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={formData.mfa_enabled}\n                onChange={(e) => setFormData({ ...formData, mfa_enabled: e.target.checked })}\n                className=\"mr-2 rounded\"\n              />\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">Require MFA for this user</span>\n            </label>\n          </div>\n\n          <div className=\"flex gap-4 pt-4\">\n            <Button type=\"button\" variant=\"secondary\" onClick={closeModal}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">\n              {editingUser ? 'Update User' : 'Create User'}\n            </Button>\n          </div>\n        </form>\n      </Modal>\n\n      {/* Invite User Modal */}\n      <Modal\n        isOpen={showInviteModal}\n        onClose={closeInviteModal}\n        title=\"Invite User\"\n      >\n        <form onSubmit={handleSendInvite} className=\"space-y-4\">\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 p-4 rounded-lg\">\n            <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n              Generate an invitation link that can be shared with the new user to sign up.\n            </p>\n          </div>\n\n          <Input\n            label=\"Email\"\n            type=\"email\"\n            value={inviteData.email}\n            onChange={(e) => setInviteData({ ...inviteData, email: e.target.value })}\n            required\n          />\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-800 dark:text-gray-200 mb-2\">Role</label>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  checked={inviteData.role === 'admin'}\n                  onChange={() => setInviteData({ ...inviteData, role: 'admin' })}\n                  className=\"mr-2\"\n                />\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Admin (Can manage billing data)</span>\n              </label>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  checked={inviteData.role === 'super_admin'}\n                  onChange={() => setInviteData({ ...inviteData, role: 'super_admin' })}\n                  className=\"mr-2\"\n                />\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Super Admin (Full access + user management)</span>\n              </label>\n            </div>\n          </div>\n\n          {inviteUrl && (\n            <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 p-4 rounded-lg\">\n              <p className=\"text-sm font-medium text-green-800 dark:text-green-300 mb-2\">Invitation Link Generated!</p>\n              <div className=\"flex gap-2 items-center\">\n                <input\n                  type=\"text\"\n                  value={inviteUrl}\n                  readOnly\n                  className=\"flex-1 px-3 py-2 bg-white dark:bg-gray-700 border border-green-300 dark:border-green-700 rounded text-sm\"\n                />\n                <Button type=\"button\" variant=\"secondary\" onClick={copyInviteUrl}>\n                  <Copy className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <p className=\"text-xs text-green-700 dark:text-green-400 mt-2\">\n                Share this link with the user. It expires in 7 days.\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex gap-4 pt-4\">\n            <Button type=\"button\" variant=\"secondary\" onClick={closeInviteModal}>\n              {inviteUrl ? 'Close' : 'Cancel'}\n            </Button>\n            {!inviteUrl && (\n              <Button type=\"submit\">\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Generate Invite Link\n              </Button>\n            )}\n          </div>\n        </form>\n      </Modal>\n\n      {/* MFA Setup Modal */}\n      <Modal\n        isOpen={showMfaSetupModal}\n        onClose={closeMfaSetupModal}\n        title={`Set Up MFA for ${mfaSetupUser?.full_name}`}\n        size=\"lg\"\n      >\n        <div className=\"space-y-6\">\n          {/* Page 1: QR Code and Manual Key */}\n          {mfaSetupStep === 'qrcode' && (\n            <>\n              <div className=\"bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 p-4 rounded-lg\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                  <strong>Step 1 of 3:</strong> Show this QR code to the user so they can scan it with their authenticator app (Google Authenticator, Authy, etc.).\n                </p>\n              </div>\n\n              {/* QR Code */}\n              <div className=\"text-center\">\n                <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-4\">\n                  Scan QR Code\n                </h3>\n                {mfaData.qrCode ? (\n                  <div className=\"flex justify-center p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\n                    <img src={mfaData.qrCode} alt=\"MFA QR Code\" className=\"w-64 h-64\" />\n                  </div>\n                ) : (\n                  <div className=\"bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700 p-4 rounded-lg\">\n                    <p className=\"text-sm text-yellow-800 dark:text-yellow-300\">\n                      QR code is generating...\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              {/* Manual Entry Key */}\n              <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                <h4 className=\"font-medium text-gray-900 dark:text-gray-100 mb-2\">Manual Setup Key</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                  If the user can't scan the QR code, they can enter this key manually:\n                </p>\n                <div className=\"flex items-center gap-2 p-3 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-700\">\n                  <code className=\"flex-1 text-sm font-mono text-gray-900 dark:text-gray-100\">\n                    {mfaService.formatSecretForDisplay(mfaData.secret)}\n                  </code>\n                  <button\n                    onClick={() => copyToClipboard(mfaData.secret)}\n                    className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n                    title=\"Copy to clipboard\"\n                  >\n                    <Copy className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 pt-4\">\n                <Button variant=\"secondary\" onClick={closeMfaSetupModal}>\n                  Cancel\n                </Button>\n                <Button onClick={() => setMfaSetupStep('verify')}>\n                  Next: Verify Setup\n                </Button>\n              </div>\n            </>\n          )}\n\n          {/* Page 2: Verify Code */}\n          {mfaSetupStep === 'verify' && (\n            <>\n              <div className=\"bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 p-4 rounded-lg\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                  <strong>Step 2 of 3:</strong> Enter the 6-digit code from your authenticator app to verify the setup.\n                </p>\n              </div>\n\n              <div className=\"text-center space-y-4\">\n                <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                  Verify Authenticator Code\n                </h3>\n\n                {verificationError && (\n                  <div className=\"bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 text-red-800 dark:text-red-300 px-4 py-3 rounded-lg text-sm\">\n                    {verificationError}\n                  </div>\n                )}\n\n                <div className=\"max-w-xs mx-auto\">\n                  <Input\n                    label=\"6-Digit Code\"\n                    type=\"text\"\n                    value={verificationCode}\n                    onChange={(e) => setVerificationCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                    placeholder=\"000000\"\n                    maxLength={6}\n                  />\n                </div>\n\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Open your authenticator app and enter the 6-digit code shown for this account.\n                </p>\n              </div>\n\n              <div className=\"flex gap-4 pt-4\">\n                <Button variant=\"secondary\" onClick={() => setMfaSetupStep('qrcode')}>\n                  Back\n                </Button>\n                <Button\n                  onClick={handleVerifyCode}\n                  disabled={verificationCode.length !== 6}\n                >\n                  Verify and Continue\n                </Button>\n              </div>\n            </>\n          )}\n\n          {/* Page 3: Backup Codes */}\n          {mfaSetupStep === 'backup' && (\n            <>\n              <div className=\"bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 p-4 rounded-lg\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                  <strong>Step 3 of 3:</strong> Save these backup codes in a secure location. The user will need them if they lose access to their authenticator app.\n                </p>\n              </div>\n\n              {/* Backup Codes */}\n              <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">Backup Recovery Codes</h4>\n                  <button\n                    onClick={() => copyToClipboard(mfaData.backupCodes.join('\\n'))}\n                    className=\"flex items-center gap-2 px-3 py-1 text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\"\n                  >\n                    <Copy className=\"w-4 h-4\" />\n                    Copy All\n                  </button>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                  Each code can only be used once. Store them in a password manager or safe location.\n                </p>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {mfaData.backupCodes.map((code, index) => (\n                    <div\n                      key={index}\n                      className=\"p-2 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-700 font-mono text-sm text-center text-gray-900 dark:text-gray-100\"\n                    >\n                      {code}\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700 p-4 rounded-lg\">\n                <p className=\"text-sm text-yellow-800 dark:text-yellow-300\">\n                  <strong>Important:</strong> Make sure the user has successfully added the authenticator and saved these backup codes before completing setup.\n                </p>\n              </div>\n\n              <div className=\"flex gap-4 pt-4\">\n                <Button variant=\"secondary\" onClick={() => setMfaSetupStep('verify')}>\n                  Back\n                </Button>\n                <Button onClick={saveMfaSetup}>\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Complete MFA Setup\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </Modal>\n\n      {/* Password Change Modal */}\n      <Modal\n        isOpen={showPasswordModal}\n        onClose={() => {\n          setShowPasswordModal(false)\n          setPasswordChangeUser(null)\n          setPasswordChangeData({ newPassword: '', confirmNewPassword: '' })\n        }}\n        title={`Change Password for ${passwordChangeUser?.full_name}`}\n      >\n        <form onSubmit={handlePasswordChange} className=\"space-y-4\">\n          <div className=\"bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 p-4 rounded-lg\">\n            <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n              Enter a new password for this user. The password must be at least 8 characters long.\n            </p>\n          </div>\n\n          <Input\n            label=\"New Password\"\n            type=\"password\"\n            value={passwordChangeData.newPassword}\n            onChange={(e) => setPasswordChangeData({ ...passwordChangeData, newPassword: e.target.value })}\n            placeholder=\"••••••••\"\n            required\n            autoComplete=\"new-password\"\n            helpText=\"Minimum 8 characters\"\n          />\n\n          <Input\n            label=\"Confirm New Password\"\n            type=\"password\"\n            value={passwordChangeData.confirmNewPassword}\n            onChange={(e) => setPasswordChangeData({ ...passwordChangeData, confirmNewPassword: e.target.value })}\n            placeholder=\"••••••••\"\n            required\n            autoComplete=\"new-password\"\n          />\n\n          <div className=\"flex gap-4 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={() => {\n                setShowPasswordModal(false)\n                setPasswordChangeUser(null)\n                setPasswordChangeData({ newPassword: '', confirmNewPassword: '' })\n              }}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" className=\"flex-1\">\n              Update Password\n            </Button>\n          </div>\n        </form>\n      </Modal>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}