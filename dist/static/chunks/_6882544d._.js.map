{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/Card.tsx"],"sourcesContent":["import React from 'react'\n\ninterface CardProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function Card({ children, className = '' }: CardProps) {\n  return (\n    <div className={`bg-gray-100 dark:bg-gray-800 rounded-lg shadow-sm border border-gray-300 dark:border-gray-700 ${className}`}>\n      {children}\n    </div>\n  )\n}\n\ninterface CardHeaderProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function CardHeader({ children, className = '' }: CardHeaderProps) {\n  return (\n    <div className={`px-6 py-4 border-b border-gray-200 dark:border-gray-700 ${className}`}>\n      {children}\n    </div>\n  )\n}\n\ninterface CardTitleProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function CardTitle({ children, className = '' }: CardTitleProps) {\n  return (\n    <h3 className={`text-lg font-bold gradient-text ${className}`}>\n      {children}\n    </h3>\n  )\n}\n\ninterface CardContentProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function CardContent({ children, className = '' }: CardContentProps) {\n  return (\n    <div className={`px-6 py-4 ${className}`}>\n      {children}\n    </div>\n  )\n}\n\ninterface CardFooterProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function CardFooter({ children, className = '' }: CardFooterProps) {\n  return (\n    <div className={`px-6 py-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 rounded-b-lg ${className}`}>\n      {children}\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAOO,SAAS,KAAK,KAAuC;QAAvC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAa,GAAvC;IACnB,qBACE,6LAAC;QAAI,WAAW,AAAC,iGAA0G,OAAV;kBAC9G;;;;;;AAGP;KANgB;AAaT,SAAS,WAAW,KAA6C;QAA7C,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAmB,GAA7C;IACzB,qBACE,6LAAC;QAAI,WAAW,AAAC,2DAAoE,OAAV;kBACxE;;;;;;AAGP;MANgB;AAaT,SAAS,UAAU,KAA4C;QAA5C,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAkB,GAA5C;IACxB,qBACE,6LAAC;QAAG,WAAW,AAAC,mCAA4C,OAAV;kBAC/C;;;;;;AAGP;MANgB;AAaT,SAAS,YAAY,KAA8C;QAA9C,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAoB,GAA9C;IAC1B,qBACE,6LAAC;QAAI,WAAW,AAAC,aAAsB,OAAV;kBAC1B;;;;;;AAGP;MANgB;AAaT,SAAS,WAAW,KAA6C;QAA7C,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAmB,GAA7C;IACzB,qBACE,6LAAC;QAAI,WAAW,AAAC,oGAA6G,OAAV;kBACjH;;;;;;AAGP;MANgB","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/Button.tsx"],"sourcesContent":["import React from 'react'\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'danger' | 'ghost'\n  size?: 'sm' | 'md' | 'lg'\n  loading?: boolean\n  children: React.ReactNode\n}\n\nexport function Button({\n  variant = 'primary',\n  size = 'md',\n  loading = false,\n  disabled,\n  children,\n  className = '',\n  ...props\n}: ButtonProps) {\n  const baseStyles = 'inline-flex items-center justify-center font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2'\n\n  const variants = {\n    primary: 'bg-blue-600 dark:bg-blue-500 text-white hover:bg-blue-700 dark:hover:bg-blue-600 focus:ring-blue-500 disabled:bg-blue-300 dark:disabled:bg-blue-800',\n    secondary: 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600 focus:ring-gray-500 disabled:bg-gray-100 dark:disabled:bg-gray-800',\n    danger: 'bg-red-600 dark:bg-red-500 text-white hover:bg-red-700 dark:hover:bg-red-600 focus:ring-red-500 disabled:bg-red-300 dark:disabled:bg-red-800',\n    ghost: 'bg-transparent text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:ring-gray-500'\n  }\n\n  const sizes = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg'\n  }\n\n  return (\n    <button\n      className={`${baseStyles} ${variants[variant]} ${sizes[size]} ${className} ${\n        (disabled || loading) ? 'cursor-not-allowed opacity-50' : ''\n      }`}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading && (\n        <svg\n          className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n        >\n          <circle\n            className=\"opacity-25\"\n            cx=\"12\"\n            cy=\"12\"\n            r=\"10\"\n            stroke=\"currentColor\"\n            strokeWidth=\"4\"\n          />\n          <path\n            className=\"opacity-75\"\n            fill=\"currentColor\"\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          />\n        </svg>\n      )}\n      {children}\n    </button>\n  )\n}\n"],"names":[],"mappings":";;;;;;AASO,SAAS,OAAO,KAQT;QARS,EACrB,UAAU,SAAS,EACnB,OAAO,IAAI,EACX,UAAU,KAAK,EACf,QAAQ,EACR,QAAQ,EACR,YAAY,EAAE,EACd,GAAG,OACS,GARS;IASrB,MAAM,aAAa;IAEnB,MAAM,WAAW;QACf,SAAS;QACT,WAAW;QACX,QAAQ;QACR,OAAO;IACT;IAEA,MAAM,QAAQ;QACZ,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;IAEA,qBACE,6LAAC;QACC,WAAW,AAAC,GAAgB,OAAd,YAAW,KAAwB,OAArB,QAAQ,CAAC,QAAQ,EAAC,KAAkB,OAAf,KAAK,CAAC,KAAK,EAAC,KAC3D,OAD8D,WAAU,KAEzE,OADC,AAAC,YAAY,UAAW,kCAAkC;QAE5D,UAAU,YAAY;QACrB,GAAG,KAAK;;YAER,yBACC,6LAAC;gBACC,WAAU;gBACV,OAAM;gBACN,MAAK;gBACL,SAAQ;;kCAER,6LAAC;wBACC,WAAU;wBACV,IAAG;wBACH,IAAG;wBACH,GAAE;wBACF,QAAO;wBACP,aAAY;;;;;;kCAEd,6LAAC;wBACC,WAAU;wBACV,MAAK;wBACL,GAAE;;;;;;;;;;;;YAIP;;;;;;;AAGP;KAzDgB","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/Input.tsx"],"sourcesContent":["import React from 'react'\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string\n  error?: string\n  helperText?: string\n  helpText?: string // Add support for helpText (alias for helperText)\n}\n\nexport function Input({\n  label,\n  error,\n  helperText,\n  helpText,\n  className = '',\n  ...props\n}: InputProps) {\n  // Use either helperText or helpText\n  const helper = helperText || helpText\n\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n          {label}\n        </label>\n      )}\n      <input\n        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 ${\n          error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n        } ${className}`}\n        {...props}\n      />\n      {error && (\n        <p className=\"mt-1 text-sm text-red-600\">{error}</p>\n      )}\n      {helper && !error && (\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">{helper}</p>\n      )}\n    </div>\n  )\n}\n\ninterface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label?: string\n  error?: string\n  helperText?: string\n}\n\nexport function Textarea({\n  label,\n  error,\n  helperText,\n  className = '',\n  ...props\n}: TextareaProps) {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n          {label}\n        </label>\n      )}\n      <textarea\n        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 ${\n          error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n        } ${className}`}\n        {...props}\n      />\n      {error && (\n        <p className=\"mt-1 text-sm text-red-600\">{error}</p>\n      )}\n      {helperText && !error && (\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">{helperText}</p>\n      )}\n    </div>\n  )\n}\n\ninterface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  label?: string\n  error?: string\n  helperText?: string\n  options: Array<{ value: string | number; label: string }>\n}\n\nexport function Select({\n  label,\n  error,\n  helperText,\n  options,\n  className = '',\n  ...props\n}: SelectProps) {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n          {label}\n        </label>\n      )}\n      <select\n        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 ${\n          error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n        } ${className}`}\n        {...props}\n      >\n        {options.map(option => (\n          <option key={option.value} value={option.value} className=\"bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100\">\n            {option.label}\n          </option>\n        ))}\n      </select>\n      {error && (\n        <p className=\"mt-1 text-sm text-red-600\">{error}</p>\n      )}\n      {helperText && !error && (\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">{helperText}</p>\n      )}\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;;;;;;AASO,SAAS,MAAM,KAOT;QAPS,EACpB,KAAK,EACL,KAAK,EACL,UAAU,EACV,QAAQ,EACR,YAAY,EAAE,EACd,GAAG,OACQ,GAPS;IAQpB,oCAAoC;IACpC,MAAM,SAAS,cAAc;IAE7B,qBACE,6LAAC;QAAI,WAAU;;YACZ,uBACC,6LAAC;gBAAM,WAAU;0BACd;;;;;;0BAGL,6LAAC;gBACC,WAAW,AAAC,uJAER,OADF,QAAQ,mBAAmB,wCAC5B,KAAa,OAAV;gBACH,GAAG,KAAK;;;;;;YAEV,uBACC,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;YAE3C,UAAU,CAAC,uBACV,6LAAC;gBAAE,WAAU;0BAAiD;;;;;;;;;;;;AAItE;KAhCgB;AAwCT,SAAS,SAAS,KAMT;QANS,EACvB,KAAK,EACL,KAAK,EACL,UAAU,EACV,YAAY,EAAE,EACd,GAAG,OACW,GANS;IAOvB,qBACE,6LAAC;QAAI,WAAU;;YACZ,uBACC,6LAAC;gBAAM,WAAU;0BACd;;;;;;0BAGL,6LAAC;gBACC,WAAW,AAAC,uJAER,OADF,QAAQ,mBAAmB,wCAC5B,KAAa,OAAV;gBACH,GAAG,KAAK;;;;;;YAEV,uBACC,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;YAE3C,cAAc,CAAC,uBACd,6LAAC;gBAAE,WAAU;0BAAiD;;;;;;;;;;;;AAItE;MA5BgB;AAqCT,SAAS,OAAO,KAOT;QAPS,EACrB,KAAK,EACL,KAAK,EACL,UAAU,EACV,OAAO,EACP,YAAY,EAAE,EACd,GAAG,OACS,GAPS;IAQrB,qBACE,6LAAC;QAAI,WAAU;;YACZ,uBACC,6LAAC;gBAAM,WAAU;0BACd;;;;;;0BAGL,6LAAC;gBACC,WAAW,AAAC,uJAER,OADF,QAAQ,mBAAmB,wCAC5B,KAAa,OAAV;gBACH,GAAG,KAAK;0BAER,QAAQ,GAAG,CAAC,CAAA,uBACX,6LAAC;wBAA0B,OAAO,OAAO,KAAK;wBAAE,WAAU;kCACvD,OAAO,KAAK;uBADF,OAAO,KAAK;;;;;;;;;;YAK5B,uBACC,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;YAE3C,cAAc,CAAC,uBACd,6LAAC;gBAAE,WAAU;0BAAiD;;;;;;;;;;;;AAItE;MAnCgB","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/lib/services/stripeInvoiceService.ts"],"sourcesContent":["import Stripe from 'stripe'\nimport { supabase } from '../supabase'\n\nclass StripeInvoiceService {\n  private stripe: Stripe | null = null\n  private testMode: boolean = true\n\n  /**\n   * Initialize Stripe with API keys from settings\n   */\n  async initialize(userId: string): Promise<boolean> {\n    try {\n      // Load Stripe settings from database\n      const { data: settings, error } = await supabase\n        .from('billing_settings')\n        .select('stripe_api_key_encrypted, stripe_test_mode')\n        .eq('user_id', userId)\n        .single()\n\n      if (error || !settings || !settings.stripe_api_key_encrypted) {\n        console.warn('No Stripe API key configured')\n        return false\n      }\n\n      // Decrypt API key\n      const apiKey = await this.decryptApiKey(settings.stripe_api_key_encrypted)\n\n      this.stripe = new Stripe(apiKey, {\n        apiVersion: '2025-09-30.clover',\n        typescript: true\n      })\n\n      this.testMode = settings.stripe_test_mode\n\n      console.log('Stripe initialized:', this.testMode ? 'Test Mode' : 'Live Mode')\n      return true\n\n    } catch (error) {\n      console.error('Failed to initialize Stripe:', error)\n      return false\n    }\n  }\n\n  /**\n   * Test Stripe connection\n   */\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    if (!this.stripe) {\n      return { success: false, message: 'Stripe not initialized' }\n    }\n\n    try {\n      await this.stripe.customers.list({ limit: 1 })\n\n      return {\n        success: true,\n        message: `Connected successfully (${this.testMode ? 'Test Mode' : 'Live Mode'})`\n      }\n    } catch (error) {\n      if (error instanceof Stripe.errors.StripeAuthenticationError) {\n        return { success: false, message: 'Invalid API key' }\n      }\n\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Connection failed'\n      }\n    }\n  }\n\n  /**\n   * Create Stripe customer\n   */\n  async createCustomer(customerData: {\n    email: string\n    name: string\n    phone?: string\n    address?: string\n    metadata?: Record<string, string>\n  }): Promise<{ success: boolean; customerId?: string; error?: string }> {\n    if (!this.stripe) {\n      return { success: false, error: 'Stripe not initialized' }\n    }\n\n    try {\n      const customer = await this.stripe.customers.create({\n        email: customerData.email,\n        name: customerData.name,\n        phone: customerData.phone,\n        address: customerData.address ? {\n          line1: customerData.address\n        } : undefined,\n        metadata: {\n          ...customerData.metadata,\n          nexasync_created_at: new Date().toISOString()\n        }\n      })\n\n      return { success: true, customerId: customer.id }\n\n    } catch (error) {\n      console.error('Failed to create Stripe customer:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to create customer'\n      }\n    }\n  }\n\n  /**\n   * Create invoice with line items\n   */\n  async createInvoice(params: {\n    stripeCustomerId: string\n    lineItems: Array<{\n      description: string\n      amount: number // In cents\n      currency: string\n    }>\n    dueInDays: number\n    metadata?: Record<string, string>\n    autoAdvance?: boolean\n  }): Promise<{ success: boolean; invoice?: Stripe.Invoice; error?: string }> {\n    if (!this.stripe) {\n      return { success: false, error: 'Stripe not initialized' }\n    }\n\n    try {\n      // Create invoice\n      const invoice = await this.stripe.invoices.create({\n        customer: params.stripeCustomerId,\n        collection_method: 'send_invoice',\n        days_until_due: params.dueInDays,\n        auto_advance: params.autoAdvance ?? false,\n        metadata: params.metadata || {}\n      })\n\n      // Add line items\n      for (const item of params.lineItems) {\n        await this.stripe.invoiceItems.create({\n          customer: params.stripeCustomerId,\n          invoice: invoice.id,\n          description: item.description,\n          amount: item.amount,\n          currency: item.currency\n        })\n      }\n\n      return { success: true, invoice }\n\n    } catch (error) {\n      console.error('Failed to create invoice:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to create invoice'\n      }\n    }\n  }\n\n  /**\n   * Finalize invoice (make it immutable and ready to send)\n   */\n  async finalizeInvoice(invoiceId: string): Promise<{ success: boolean; error?: string }> {\n    if (!this.stripe) {\n      return { success: false, error: 'Stripe not initialized' }\n    }\n\n    try {\n      await this.stripe.invoices.finalizeInvoice(invoiceId)\n      return { success: true }\n\n    } catch (error) {\n      console.error('Failed to finalize invoice:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to finalize invoice'\n      }\n    }\n  }\n\n  /**\n   * Send invoice to customer\n   */\n  async sendInvoice(invoiceId: string): Promise<{ success: boolean; error?: string }> {\n    if (!this.stripe) {\n      return { success: false, error: 'Stripe not initialized' }\n    }\n\n    try {\n      await this.stripe.invoices.sendInvoice(invoiceId)\n      return { success: true }\n\n    } catch (error) {\n      console.error('Failed to send invoice:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to send invoice'\n      }\n    }\n  }\n\n  /**\n   * Mark invoice as paid (manually)\n   */\n  async markInvoiceAsPaid(invoiceId: string): Promise<{ success: boolean; error?: string }> {\n    if (!this.stripe) {\n      return { success: false, error: 'Stripe not initialized' }\n    }\n\n    try {\n      await this.stripe.invoices.pay(invoiceId, {\n        paid_out_of_band: true // Mark as paid outside of Stripe\n      })\n      return { success: true }\n\n    } catch (error) {\n      console.error('Failed to mark invoice as paid:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to mark as paid'\n      }\n    }\n  }\n\n  /**\n   * Void/cancel invoice\n   */\n  async voidInvoice(invoiceId: string): Promise<{ success: boolean; error?: string }> {\n    if (!this.stripe) {\n      return { success: false, error: 'Stripe not initialized' }\n    }\n\n    try {\n      await this.stripe.invoices.voidInvoice(invoiceId)\n      return { success: true }\n\n    } catch (error) {\n      console.error('Failed to void invoice:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to void invoice'\n      }\n    }\n  }\n\n  /**\n   * Decrypt API key from storage\n   * TODO: Implement proper encryption/decryption\n   */\n  async decryptApiKey(encrypted: string): Promise<string> {\n    // For now, assume it's base64 encoded\n    // In production, use proper encryption (AES-256-GCM)\n    try {\n      return Buffer.from(encrypted, 'base64').toString('utf-8')\n    } catch {\n      // If not base64, assume it's plain text (for dev purposes)\n      return encrypted\n    }\n  }\n\n  /**\n   * Encrypt API key for storage\n   */\n  async encryptApiKey(plaintext: string): Promise<string> {\n    // For now, use base64 encoding\n    // In production, use proper encryption (AES-256-GCM)\n    return Buffer.from(plaintext, 'utf-8').toString('base64')\n  }\n}\n\nexport const stripeInvoiceService = new StripeInvoiceService()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 598, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/components/ui/SyncStatusIndicator.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react'\nimport { Cloud, CloudOff, RefreshCw, Check } from 'lucide-react'\nimport { useCloudSync } from '@/components/providers/CloudSyncProvider'\n\nexport function SyncStatusIndicator() {\n  const { syncStatus, isSyncing, forceSync } = useCloudSync()\n\n  const formatLastSync = (lastSync?: string) => {\n    if (!lastSync) return 'Never'\n\n    const date = new Date(lastSync)\n    const now = new Date()\n    const diffMs = now.getTime() - date.getTime()\n    const diffMins = Math.floor(diffMs / 60000)\n\n    if (diffMins < 1) return 'Just now'\n    if (diffMins < 60) return `${diffMins}m ago`\n\n    const diffHours = Math.floor(diffMins / 60)\n    if (diffHours < 24) return `${diffHours}h ago`\n\n    const diffDays = Math.floor(diffHours / 24)\n    return `${diffDays}d ago`\n  }\n\n  const handleClick = async () => {\n    if (!isSyncing) {\n      await forceSync()\n    }\n  }\n\n  return (\n    <button\n      onClick={handleClick}\n      disabled={isSyncing}\n      className=\"flex items-center gap-2 px-3 py-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n      title={`Last synced: ${formatLastSync(syncStatus.lastSync)}${isSyncing ? ' - Syncing...' : ' - Click to sync now'}`}\n    >\n      {isSyncing ? (\n        <RefreshCw className=\"w-4 h-4 text-blue-600 dark:text-blue-400 animate-spin\" />\n      ) : syncStatus.enabled && syncStatus.lastSync ? (\n        <div className=\"relative\">\n          <Cloud className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n          <Check className=\"w-2 h-2 text-green-600 dark:text-green-400 absolute -bottom-0.5 -right-0.5\" />\n        </div>\n      ) : syncStatus.enabled ? (\n        <Cloud className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n      ) : (\n        <CloudOff className=\"w-4 h-4 text-gray-400 dark:text-gray-500\" />\n      )}\n      <span className=\"hidden sm:inline text-xs text-gray-600 dark:text-gray-400\">\n        {isSyncing ? 'Syncing...' : formatLastSync(syncStatus.lastSync)}\n      </span>\n    </button>\n  )\n}\n"],"names":[],"mappings":";;;;;AAGA;AAAA;AAAA;AAAA;AACA;;;AAJA;;;AAMO,SAAS;;IACd,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,IAAA,gKAAY;IAEzD,MAAM,iBAAiB,CAAC;QACtB,IAAI,CAAC,UAAU,OAAO;QAEtB,MAAM,OAAO,IAAI,KAAK;QACtB,MAAM,MAAM,IAAI;QAChB,MAAM,SAAS,IAAI,OAAO,KAAK,KAAK,OAAO;QAC3C,MAAM,WAAW,KAAK,KAAK,CAAC,SAAS;QAErC,IAAI,WAAW,GAAG,OAAO;QACzB,IAAI,WAAW,IAAI,OAAO,AAAC,GAAW,OAAT,UAAS;QAEtC,MAAM,YAAY,KAAK,KAAK,CAAC,WAAW;QACxC,IAAI,YAAY,IAAI,OAAO,AAAC,GAAY,OAAV,WAAU;QAExC,MAAM,WAAW,KAAK,KAAK,CAAC,YAAY;QACxC,OAAO,AAAC,GAAW,OAAT,UAAS;IACrB;IAEA,MAAM,cAAc;QAClB,IAAI,CAAC,WAAW;YACd,MAAM;QACR;IACF;IAEA,qBACE,6LAAC;QACC,SAAS;QACT,UAAU;QACV,WAAU;QACV,OAAO,AAAC,gBAAqD,OAAtC,eAAe,WAAW,QAAQ,GAAyD,OAArD,YAAY,kBAAkB;;YAE1F,0BACC,6LAAC,gOAAS;gBAAC,WAAU;;;;;uBACnB,WAAW,OAAO,IAAI,WAAW,QAAQ,iBAC3C,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,gNAAK;wBAAC,WAAU;;;;;;kCACjB,6LAAC,gNAAK;wBAAC,WAAU;;;;;;;;;;;uBAEjB,WAAW,OAAO,iBACpB,6LAAC,gNAAK;gBAAC,WAAU;;;;;qCAEjB,6LAAC,6NAAQ;gBAAC,WAAU;;;;;;0BAEtB,6LAAC;gBAAK,WAAU;0BACb,YAAY,eAAe,eAAe,WAAW,QAAQ;;;;;;;;;;;;AAItE;GAnDgB;;QAC+B,gKAAY;;;KAD3C","debugId":null}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"sources":["file:///I:/Apps%20Back%20Up/nexasync-billing/app/admin/billing/settings/page.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Save, TestTube, CheckCircle, AlertCircle } from 'lucide-react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'\nimport { Button } from '@/components/ui/Button'\nimport { Input, Textarea, Select } from '@/components/ui/Input'\nimport { supabase } from '@/lib/supabase'\nimport { stripeInvoiceService } from '@/lib/services/stripeInvoiceService'\nimport type { BillingSettings } from '@/lib/types/billing'\nimport { useNotification } from '@/components/ui/Notification'\nimport { SyncStatusIndicator } from '@/components/ui/SyncStatusIndicator'\n\nexport default function SettingsPage() {\n  const { showNotification } = useNotification()\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [testingConnection, setTestingConnection] = useState(false)\n  const [connectionResult, setConnectionResult] = useState<{ success: boolean; message: string } | null>(null)\n  const [settings, setSettings] = useState<Partial<BillingSettings>>({\n    stripe_test_mode: true,\n    default_markup_percentage: 0,\n    default_due_date_days: 30,\n    default_invoice_note: '',\n    invoice_footer_text: '',\n    notification_email: '',\n    notify_on_invoice_generated: true,\n    notify_on_payment_received: true\n  })\n  const [stripeApiKey, setStripeApiKey] = useState('')\n  const [stripePublishableKey, setStripePublishableKey] = useState('')\n  const [retellApiKey, setRetellApiKey] = useState('')\n  const [vonageApiKey, setVonageApiKey] = useState('')\n  const [vonageApiSecret, setVonageApiSecret] = useState('')\n  const [twilioAccountSid, setTwilioAccountSid] = useState('')\n  const [twilioAuthToken, setTwilioAuthToken] = useState('')\n\n  useEffect(() => {\n    loadSettings()\n  }, [])\n\n  async function loadSettings() {\n    setLoading(true)\n    try {\n      const { data: userData } = await supabase.auth.getUser()\n      if (!userData.user) return\n\n      const { data, error } = await supabase\n        .from('billing_settings')\n        .select('*')\n        .eq('user_id', userData.user.id)\n        .single()\n\n      if (data) {\n        setSettings(data)\n        setStripePublishableKey(data.stripe_publishable_key || '')\n      } else if (error && error.code !== 'PGRST116') {\n        // PGRST116 is \"no rows returned\", which is fine for first time\n        console.error('Failed to load settings:', error)\n      }\n    } catch (error) {\n      console.error('Failed to load settings:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function saveSettings() {\n    setSaving(true)\n    try {\n      const { data: userData } = await supabase.auth.getUser()\n      if (!userData.user) throw new Error('Not authenticated')\n\n      // Encrypt Stripe API key if provided\n      let encryptedStripeKey = settings.stripe_api_key_encrypted\n      if (stripeApiKey) {\n        encryptedStripeKey = await stripeInvoiceService.encryptApiKey(stripeApiKey)\n      }\n\n      // Encrypt Retell API key if provided\n      let encryptedRetellKey = settings.retell_api_key_encrypted\n      if (retellApiKey) {\n        encryptedRetellKey = await stripeInvoiceService.encryptApiKey(retellApiKey)\n      }\n\n      // Encrypt Vonage API credentials if provided\n      let encryptedVonageKey = settings.vonage_api_key_encrypted\n      let encryptedVonageSecret = settings.vonage_api_secret_encrypted\n      if (vonageApiKey) {\n        encryptedVonageKey = await stripeInvoiceService.encryptApiKey(vonageApiKey)\n      }\n      if (vonageApiSecret) {\n        encryptedVonageSecret = await stripeInvoiceService.encryptApiKey(vonageApiSecret)\n      }\n\n      // Encrypt Twilio API credentials if provided\n      let encryptedTwilioSid = settings.twilio_account_sid_encrypted\n      let encryptedTwilioToken = settings.twilio_auth_token_encrypted\n      if (twilioAccountSid) {\n        encryptedTwilioSid = await stripeInvoiceService.encryptApiKey(twilioAccountSid)\n      }\n      if (twilioAuthToken) {\n        encryptedTwilioToken = await stripeInvoiceService.encryptApiKey(twilioAuthToken)\n      }\n\n      const settingsToSave = {\n        ...settings,\n        user_id: userData.user.id,\n        stripe_api_key_encrypted: encryptedStripeKey,\n        stripe_publishable_key: stripePublishableKey,\n        retell_api_key_encrypted: encryptedRetellKey,\n        vonage_api_key_encrypted: encryptedVonageKey,\n        vonage_api_secret_encrypted: encryptedVonageSecret,\n        twilio_account_sid_encrypted: encryptedTwilioSid,\n        twilio_auth_token_encrypted: encryptedTwilioToken\n      }\n\n      const { error } = await supabase\n        .from('billing_settings')\n        .upsert(settingsToSave, {\n          onConflict: 'user_id'\n        })\n\n      if (error) throw error\n\n      showNotification('Settings saved successfully', 'success')\n      setStripeApiKey('') // Clear for security\n      setRetellApiKey('') // Clear for security\n      setVonageApiKey('') // Clear for security\n      setVonageApiSecret('') // Clear for security\n      setTwilioAccountSid('') // Clear for security\n      setTwilioAuthToken('') // Clear for security\n      loadSettings()\n    } catch (error) {\n      console.error('Failed to save settings:', error)\n      showNotification('Failed to save settings', 'error')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  async function testConnection() {\n    setTestingConnection(true)\n    setConnectionResult(null)\n\n    try {\n      const { data: userData } = await supabase.auth.getUser()\n      if (!userData.user) throw new Error('Not authenticated')\n\n      await stripeInvoiceService.initialize(userData.user.id)\n      const result = await stripeInvoiceService.testConnection()\n      setConnectionResult(result)\n    } catch (error) {\n      setConnectionResult({\n        success: false,\n        message: error instanceof Error ? error.message : 'Connection test failed'\n      })\n    } finally {\n      setTestingConnection(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-8\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-64 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-black gradient-text\">Billing Settings</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Configure Stripe integration and invoice defaults</p>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Cloud Sync Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Cloud Sync</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 p-4 rounded-lg\">\n              <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                Your settings and preferences are automatically synchronized across devices.\n                Use the sync button below to manually sync your data or check the sync status.\n              </p>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Sync Status</p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\n                  Manage your cloud synchronization settings\n                </p>\n              </div>\n              <SyncStatusIndicator />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stripe Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Stripe Integration</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 p-4 rounded-lg\">\n              <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                Your Stripe API keys are encrypted and stored securely. Test mode allows you to\n                test invoice generation without creating real charges.\n              </p>\n            </div>\n\n            <Input\n              label=\"Stripe Secret Key\"\n              type=\"password\"\n              value={stripeApiKey}\n              onChange={(e) => setStripeApiKey(e.target.value)}\n              placeholder=\"sk_test_... or sk_live_...\"\n              helperText=\"Your Stripe Secret Key (starts with sk_). Leave blank to keep existing key.\"\n            />\n\n            <Input\n              label=\"Stripe Publishable Key\"\n              value={stripePublishableKey}\n              onChange={(e) => setStripePublishableKey(e.target.value)}\n              placeholder=\"pk_test_... or pk_live_...\"\n              helperText=\"Your Stripe Publishable Key (starts with pk_)\"\n            />\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Mode</label>\n              <div className=\"flex items-center gap-4\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    checked={settings.stripe_test_mode}\n                    onChange={() => setSettings({ ...settings, stripe_test_mode: true })}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">🧪 Test Mode (No real charges)</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    checked={!settings.stripe_test_mode}\n                    onChange={() => setSettings({ ...settings, stripe_test_mode: false })}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">⚡ Live Mode (Real invoices and charges)</span>\n                </label>\n              </div>\n            </div>\n\n            <div className=\"flex gap-4\">\n              <Button\n                variant=\"secondary\"\n                onClick={testConnection}\n                loading={testingConnection}\n              >\n                <TestTube className=\"w-4 h-4 mr-2\" />\n                Test Connection\n              </Button>\n              <Button onClick={saveSettings} loading={saving}>\n                <Save className=\"w-4 h-4 mr-2\" />\n                Save Stripe Settings\n              </Button>\n            </div>\n\n            {connectionResult && (\n              <div className={`p-4 rounded-lg border ${\n                connectionResult.success\n                  ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800'\n                  : 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800'\n              }`}>\n                <div className=\"flex items-center\">\n                  {connectionResult.success ? (\n                    <CheckCircle className=\"w-5 h-5 text-green-600 dark:text-green-400 mr-2\" />\n                  ) : (\n                    <AlertCircle className=\"w-5 h-5 text-red-600 dark:text-red-400 mr-2\" />\n                  )}\n                  <p className={`text-sm ${\n                    connectionResult.success ? 'text-green-800 dark:text-green-300' : 'text-red-800 dark:text-red-300'\n                  }`}>\n                    {connectionResult.message}\n                  </p>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Vonage Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Vonage API Integration</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 p-4 rounded-lg\">\n              <p className=\"text-sm text-purple-800 dark:text-purple-300\">\n                Configure Vonage (formerly Nexmo) for SMS and Voice services. Your API credentials are encrypted and stored securely.\n              </p>\n            </div>\n\n            <Input\n              label=\"Vonage API Key\"\n              type=\"password\"\n              value={vonageApiKey}\n              onChange={(e) => setVonageApiKey(e.target.value)}\n              placeholder=\"Enter your Vonage API Key\"\n              helperText=\"Your Vonage API Key. Leave blank to keep existing key.\"\n            />\n\n            <Input\n              label=\"Vonage API Secret\"\n              type=\"password\"\n              value={vonageApiSecret}\n              onChange={(e) => setVonageApiSecret(e.target.value)}\n              placeholder=\"Enter your Vonage API Secret\"\n              helperText=\"Your Vonage API Secret. Leave blank to keep existing secret.\"\n            />\n\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"vonage_enabled\"\n                checked={settings.vonage_api_enabled || false}\n                onChange={(e) => setSettings({\n                  ...settings,\n                  vonage_api_enabled: e.target.checked\n                })}\n                className=\"mr-2 rounded\"\n              />\n              <label htmlFor=\"vonage_enabled\" className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Enable Vonage API integration for cost tracking\n              </label>\n            </div>\n\n            <Button onClick={saveSettings} loading={saving}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Vonage Settings\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Twilio Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Twilio API Integration</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 p-4 rounded-lg\">\n              <p className=\"text-sm text-green-800 dark:text-green-300\">\n                Configure Twilio for SMS and Voice services. Your API credentials are encrypted and stored securely.\n              </p>\n            </div>\n\n            <Input\n              label=\"Twilio Account SID\"\n              type=\"password\"\n              value={twilioAccountSid}\n              onChange={(e) => setTwilioAccountSid(e.target.value)}\n              placeholder=\"Enter your Twilio Account SID\"\n              helperText=\"Your Twilio Account SID. Leave blank to keep existing SID.\"\n            />\n\n            <Input\n              label=\"Twilio Auth Token\"\n              type=\"password\"\n              value={twilioAuthToken}\n              onChange={(e) => setTwilioAuthToken(e.target.value)}\n              placeholder=\"Enter your Twilio Auth Token\"\n              helperText=\"Your Twilio Auth Token. Leave blank to keep existing token.\"\n            />\n\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"twilio_enabled\"\n                checked={settings.twilio_api_enabled || false}\n                onChange={(e) => setSettings({\n                  ...settings,\n                  twilio_api_enabled: e.target.checked\n                })}\n                className=\"mr-2 rounded\"\n              />\n              <label htmlFor=\"twilio_enabled\" className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Enable Twilio API integration for cost tracking\n              </label>\n            </div>\n\n            <Button onClick={saveSettings} loading={saving}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Twilio Settings\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Invoice Defaults */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Invoice Defaults</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Input\n              label=\"Default Markup Percentage\"\n              type=\"number\"\n              min=\"0\"\n              max=\"10000\"\n              step=\"0.1\"\n              value={settings.default_markup_percentage || 0}\n              onChange={(e) => setSettings({\n                ...settings,\n                default_markup_percentage: parseFloat(e.target.value)\n              })}\n              helperText=\"Default markup applied to all new customers (can be overridden per customer)\"\n            />\n\n            <Select\n              label=\"Payment Terms\"\n              value={settings.default_due_date_days || 30}\n              onChange={(e) => setSettings({\n                ...settings,\n                default_due_date_days: parseInt(e.target.value)\n              })}\n              options={[\n                { value: 0, label: 'Due on Receipt' },\n                { value: 15, label: 'Net 15 (15 days)' },\n                { value: 30, label: 'Net 30 (30 days)' },\n                { value: 60, label: 'Net 60 (60 days)' },\n                { value: 90, label: 'Net 90 (90 days)' }\n              ]}\n            />\n\n            <Textarea\n              label=\"Default Invoice Note\"\n              value={settings.default_invoice_note || ''}\n              onChange={(e) => setSettings({\n                ...settings,\n                default_invoice_note: e.target.value\n              })}\n              rows={3}\n              placeholder=\"Thank you for your business...\"\n              helperText=\"This note will appear on all invoices\"\n            />\n\n            <Textarea\n              label=\"Invoice Footer\"\n              value={settings.invoice_footer_text || ''}\n              onChange={(e) => setSettings({\n                ...settings,\n                invoice_footer_text: e.target.value\n              })}\n              rows={2}\n              placeholder=\"NexaSync Billing | www.nexasync.com | support@nexasync.com\"\n              helperText=\"Footer text displayed at bottom of invoices\"\n            />\n\n            <Button onClick={saveSettings} loading={saving}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Invoice Defaults\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Notification Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Email Notifications</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Input\n              label=\"Notification Email\"\n              type=\"email\"\n              value={settings.notification_email || ''}\n              onChange={(e) => setSettings({\n                ...settings,\n                notification_email: e.target.value\n              })}\n              placeholder=\"billing@example.com\"\n              helperText=\"Email address to receive billing notifications\"\n            />\n\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.notify_on_invoice_generated}\n                  onChange={(e) => setSettings({\n                    ...settings,\n                    notify_on_invoice_generated: e.target.checked\n                  })}\n                  className=\"mr-2 rounded\"\n                />\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Send email summary when invoices are created</span>\n              </label>\n\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.notify_on_payment_received}\n                  onChange={(e) => setSettings({\n                    ...settings,\n                    notify_on_payment_received: e.target.checked\n                  })}\n                  className=\"mr-2 rounded\"\n                />\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Send email when Stripe reports payment received</span>\n              </label>\n            </div>\n\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Note: Payment notifications require Stripe webhook configuration (Phase 2)\n            </p>\n\n            <Button onClick={saveSettings} loading={saving}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Notification Settings\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Automation Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Automatic Invoice Generation</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 p-4 rounded-lg\">\n              <p className=\"text-sm text-yellow-800 dark:text-yellow-300\">\n                ⚠️ Automation is currently in development. Manual invoice generation is recommended.\n              </p>\n            </div>\n\n            <div className=\"opacity-50 pointer-events-none\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  disabled\n                  className=\"mr-2 rounded\"\n                />\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Automatically generate invoices monthly (Coming in Phase 2)</span>\n              </label>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}